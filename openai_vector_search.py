# -*- coding: utf-8 -*-
"""Openai_vector_search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ImmzY5QiLHz4vUSV5niaqu9CS6ZUnOb-
"""

!pip install faiss-cpu openai numpy

import openai
import faiss
import numpy as np
import sqlite3
import time
from datetime import datetime


openai.api_key = ""

db_path = "embeddings_data.db"

def init_database():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()


    cursor.execute('''
        CREATE TABLE IF NOT EXISTS embeddings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            embedding BLOB,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()


init_database()


def get_embedding(text):
    response = openai.embeddings.create(
        model="text-embedding-ada-002",
        input=text
    )

    return np.array(response.data[0].embedding, dtype=np.float32)


embedding_dim = 1536
index = faiss.IndexFlatL2(embedding_dim)


def store_embedding(text):
    embedding = get_embedding(text)


    index.add(np.array([embedding]))


    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO embeddings (text, embedding) VALUES (?, ?)", (text, embedding.tobytes()))
    conn.commit()
    conn.close()

    print(f"[✔] Embedding salvo para: {text}")


def search_similar_text(query_text):
    query_embedding = get_embedding(query_text)
    query_embedding = np.array([query_embedding])


    distances, indices = index.search(query_embedding, k=1)

    if len(indices) > 0 and indices[0][0] != -1:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()


        cursor.execute("SELECT text FROM embeddings WHERE id=?", (indices[0][0] + 1,))
        result = cursor.fetchone()

        conn.close()

        return result[0] if result else "Nenhum resultado encontrado."
    return "Nenhum resultado encontrado."


def main_loop():
    texts_to_store = [
        "Inteligência Artificial está revolucionando o mundo.",
        "Machine Learning permite criar modelos preditivos incríveis.",
        "OpenAI desenvolve tecnologias avançadas para NLP.",
        "Os embeddings ajudam a encontrar similaridade entre textos.",
        "O aprendizado profundo melhora a precisão dos modelos."
    ]

    for text in texts_to_store:
        store_embedding(text)

    while True:
        print("\n🔍 Buscando informações e gerando novos embeddings...\n")

        query = "Como a OpenAI melhora a inteligência artificial?"
        resultado = search_similar_text(query)

        print(f"🔎 Pergunta: {query}")
        print(f"📌 Resposta Mais Similar: {resultado}\n")


        time.sleep(60)


if __name__ == "__main__":
    main_loop()